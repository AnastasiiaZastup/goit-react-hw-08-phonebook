{"version":3,"file":"static/js/482.d3266020.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.js","pages/LoginPage.js"],"sourcesContent":["import * as Yup from 'yup';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Text,\n  VStack,\n} from '@chakra-ui/react';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from '../../redux/authorization/authOperations';\nimport { selectIsError } from '../../redux/authorization/authSelectors';\nimport { resetError } from '../../redux/authorization/authSlice';\nimport toast from 'react-hot-toast';\n\nconst schema = Yup.object().shape({\n  email: Yup.string().email().required('Required'),\n  password: Yup.string().min(7, 'Too short').required('Required'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const isError = useSelector(selectIsError);\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: schema,\n    onSubmit: async values => {\n      try {\n        await dispatch(login(values)).unwrap();\n        toast.success('Login successful');\n        dispatch(resetError());\n      } catch (error) {\n        if (isError.rejectedWithValue) {\n          const { payload } = isError.rejectedWithValue;\n          toast.error(payload.message);\n        } else {\n          toast.error('An error occurred during login');\n        }\n      }\n    },\n  });\n\n  return (\n    <Flex align=\"center\" justify=\"center\" marginTop=\"10%\">\n      <Box bg=\"white\" p={6} rounded=\"md\">\n        <form onSubmit={formik.handleSubmit}>\n          <VStack spacing={4} align=\"flex-start\">\n            <Text\n              fontSize=\"2xl\"\n              fontWeight=\"bold\"\n              marginRight=\"auto\"\n              marginLeft=\"auto\"\n            >\n              Login\n            </Text>\n            <FormControl\n              isInvalid={formik.touched.email && formik.errors.email}\n            >\n              <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n              <Input\n                name=\"email\"\n                id=\"email\"\n                type=\"email\"\n                variant=\"outline\"\n                onChange={formik.handleChange}\n                value={formik.values.email}\n                onBlur={formik.handleBlur}\n              />\n              <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n            </FormControl>\n            <FormControl\n              isInvalid={formik.touched.password && formik.errors.password}\n            >\n              <FormLabel htmlFor=\"password\">Password</FormLabel>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                variant=\"outline\"\n                onChange={formik.handleChange}\n                value={formik.values.password}\n                onBlur={formik.handleBlur}\n              />\n              <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n            </FormControl>\n            <Button type=\"submit\" colorScheme=\"blue\" width=\"full\" marginTop=\"4\">\n              Sign In\n            </Button>\n          </VStack>\n        </form>\n      </Box>\n    </Flex>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function LoginPage() {\n  return (\n    <>\n      <LoginForm />\n    </>\n  );\n}\n"],"names":["schema","Yup","shape","email","required","password","min","LoginForm","dispatch","useDispatch","isError","useSelector","selectIsError","formik","useFormik","initialValues","validationSchema","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","_callee","values","payload","_context","prev","next","login","unwrap","toast","resetError","t0","rejectedWithValue","message","stop","_x","apply","arguments","_jsx","Flex","align","justify","marginTop","children","Box","bg","p","rounded","handleSubmit","_jsxs","VStack","spacing","Text","fontSize","fontWeight","marginRight","marginLeft","FormControl","isInvalid","touched","errors","FormLabel","htmlFor","Input","name","id","type","variant","onChange","handleChange","value","onBlur","handleBlur","FormErrorMessage","Button","colorScheme","width","LoginPage","_Fragment"],"sourceRoot":""}