{"version":3,"file":"static/js/893.09721203.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.js","pages/RegistrationPage.js"],"sourcesContent":["import * as Yup from 'yup';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Text,\n  VStack,\n} from '@chakra-ui/react';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { registration } from '../../redux/authorization/authOperations';\nimport { useEffect } from 'react';\nimport { resetError } from '../../redux/authorization/authSlice';\nimport { selectIsError } from '../../redux/authorization/authSelectors';\nimport toast from 'react-hot-toast';\n\nconst schema = Yup.object().shape({\n  name: Yup.string().min(3, 'Too short').required('Required'),\n  email: Yup.string().email().required('Required'),\n  password: Yup.string().min(7, 'Too short').required('Required'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const isError = useSelector(selectIsError);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    validationSchema: schema,\n    onSubmit: values => {\n      dispatch(registration(values));\n    },\n  });\n\n  useEffect(() => {\n    if (isError) {\n      toast.error('Your email is invalid or already registered');\n      dispatch(resetError());\n    }\n  }, [isError, dispatch]);\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" marginTop=\"10%\">\n      <Box bg=\"white\" p={8} rounded=\"md\">\n        <form onSubmit={formik.handleSubmit}>\n          <VStack spacing={4} align=\"flex-start\">\n            <Text\n              fontSize=\"2xl\"\n              fontWeight=\"bold\"\n              marginRight=\"auto\"\n              marginLeft=\"auto\"\n            >\n              Create Account\n            </Text>\n            <FormControl isInvalid={formik.touched.name && formik.errors.name}>\n              <FormLabel htmlFor=\"name\">Your Name</FormLabel>\n              <Input\n                name=\"name\"\n                id=\"name\"\n                type=\"name\"\n                variant=\"outline\"\n                onChange={formik.handleChange}\n                value={formik.values.name}\n                onBlur={formik.handleBlur}\n              />\n              <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\n            </FormControl>\n            <FormControl\n              isInvalid={formik.touched.email && formik.errors.email}\n            >\n              <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n              <Input\n                name=\"email\"\n                id=\"email\"\n                type=\"email\"\n                variant=\"outline\"\n                onChange={formik.handleChange}\n                value={formik.values.email}\n                onBlur={formik.handleBlur}\n              />\n              <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n            </FormControl>\n            <FormControl\n              isInvalid={formik.touched.password && formik.errors.password}\n            >\n              <FormLabel htmlFor=\"password\">Password</FormLabel>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                variant=\"outline\"\n                onChange={formik.handleChange}\n                value={formik.values.password}\n                onBlur={formik.handleBlur}\n              />\n              <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n            </FormControl>\n            <Button\n              type=\"submit\"\n              colorScheme=\"purple\"\n              width=\"full\"\n              marginTop=\"4\"\n            >\n              Sign Up\n            </Button>\n          </VStack>\n        </form>\n      </Box>\n    </Flex>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function LoginPage() {\n  return (\n    <>\n      <RegisterForm />\n    </>\n  );\n}\n"],"names":["schema","Yup","shape","name","min","required","email","password","RegisterForm","dispatch","useDispatch","isError","useSelector","selectIsError","formik","useFormik","initialValues","validationSchema","onSubmit","values","registration","useEffect","toast","resetError","_jsx","Flex","bg","align","justify","marginTop","children","Box","p","rounded","handleSubmit","_jsxs","VStack","spacing","Text","fontSize","fontWeight","marginRight","marginLeft","FormControl","isInvalid","touched","errors","FormLabel","htmlFor","Input","id","type","variant","onChange","handleChange","value","onBlur","handleBlur","FormErrorMessage","Button","colorScheme","width","LoginPage","_Fragment"],"sourceRoot":""}